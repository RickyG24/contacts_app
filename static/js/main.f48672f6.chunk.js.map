{"version":3,"sources":["SearchBar.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","searchQuery","setSearchQuery","method","autoComplete","onSubmit","e","preventDefault","value","onInput","target","type","name","placeholder","MyComponent","useState","items","setItems","search","window","location","query","URLSearchParams","get","filteredContacts","contacts","filter","contact","contactName","toLowerCase","contactPhone","phone","contactEmail","email","includes","filterContacts","useEffect","fetch","then","res","json","result","map","item","class","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAiBeA,EAdG,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,eAK9B,OACI,sBAAMC,OAAO,MAAMC,aAAa,MAAMC,SALzB,SAACC,GACdA,EAAEC,kBAIF,SACI,uBAAOC,MAAOP,EACdQ,QAAS,SAACH,GAAD,OAAOJ,EAAeI,EAAEI,OAAOF,QAAQG,KAAK,OACjDC,KAAK,IAAIC,YAAY,2BCqDtBC,MA7Cf,WACI,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACQC,EAAWC,OAAOC,SAAlBF,OACFG,EAAQ,IAAIC,gBAAgBJ,GAAQK,IAAI,KAC9C,EAAsCR,mBAASM,GAAS,IAAxD,mBAAOpB,EAAP,KAAoBC,EAApB,KACMsB,EApBa,SAACC,EAAUJ,GAC9B,OAAKA,EAIEI,EAASC,QAAO,SAACC,GACpB,IAAMC,EAAcD,EAAQf,KAAKiB,cAC3BC,EAAeH,EAAQI,MACvBC,EAAeL,EAAQM,MAAMJ,cACnC,OAAOD,EAAYM,SAASb,EAAMQ,gBAClCC,EAAaI,SAASb,IAAUW,EAAaE,SAASb,EAAMQ,kBARrDJ,EAkBcU,CAAenB,EAAOf,GAa/C,OAXAmC,qBAAU,WACNC,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACDxB,EAASwB,QAId,IAGH,gCACI,cAAC,EAAD,CAAWxC,YAAaA,EAAaC,eAAgBA,IACrD,6BACKsB,EAAiBkB,KAAI,SAAAC,GAAI,OAC1B,6BACI,qBAAKC,MAAM,OAAX,SACA,gCACI,oBACIA,MAAM,aADV,SACwBD,EAAK/B,OAE7B,oBACIgC,MAAM,qBADV,SACgCD,EAAKV,QAErC,mBACIW,MAAM,YADV,SACuBD,EAAKZ,cAV3BY,EAAK/B,eC/BXiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.f48672f6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\n\r\nconst SearchBar = ({ searchQuery, setSearchQuery }) => {\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <form method=\"get\" autoComplete=\"off\" onSubmit={onSubmit}>\r\n            <input value={searchQuery} \r\n            onInput={(e) => setSearchQuery(e.target.value)} type=\"text\"\r\n                name=\"s\" placeholder=\"Search-contact-list\"/>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default SearchBar;","import './App.css';\nimport React, {useState, useEffect} from 'react';\n\nimport SearchBar from './SearchBar';\n\nconst filterContacts = (contacts, query) => {\n    if (!query) {\n        return contacts;\n    }\n\n    return contacts.filter((contact) => {\n        const contactName = contact.name.toLowerCase();\n        const contactPhone = contact.phone;\n        const contactEmail = contact.email.toLowerCase();\n        return contactName.includes(query.toLowerCase()) || \n        contactPhone.includes(query) || contactEmail.includes(query.toLowerCase());\n    });\n};\n\n\nfunction MyComponent() {\n    const [items, setItems] = useState([]);\n    const { search } = window.location;\n    const query = new URLSearchParams(search).get('s');\n    const [searchQuery, setSearchQuery] = useState(query || '');\n    const filteredContacts = filterContacts(items, searchQuery);\n\n    useEffect(() => {\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n        .then(res => res.json())\n        .then(\n            (result) => {\n            setItems(result);\n            },\n\n        )\n    }, [])\n    \n    return (\n    <div>\n        <SearchBar searchQuery={searchQuery} setSearchQuery={setSearchQuery}/>\n        <ul>\n            {filteredContacts.map(item => (\n            <li key={item.name}>\n                <div class=\"card\">\n                <div>\n                    <h5 \n                        class=\"card-title\">{item.name}\n                    </h5>\n                    <h6 \n                        class=\"card-subtitle mb-2\">{item.email}\n                    </h6>\n                    <p \n                        class=\"card-text\">{item.phone}\n                    </p>\n                </div>\n                </div>\n            </li>\n            ))}\n        </ul>\n    </div>\n    );\n}\n\n  \nexport default MyComponent;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}